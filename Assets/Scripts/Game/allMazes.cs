using UnityEngine;
using System.Collections;

[System.Serializable]
public class allMazes {
	//0 = blank space
	//1 = wall
	//2 = player start
	//3 = computer start
	//4 = maze end

	public static allMazes current;

	public int[,] use;
	public int level = 0;

	//private static int[,] dimensions = {{15,15},
	//									{15,19}};

	public static void createMaze() {
		ArrayList cells = new ArrayList();
		ArrayList neighbors = new ArrayList();
		//int[,] temp = new int[level*2+15, level*2+15];
		//int [,] temp = new int[dimensions [level, 0], dimensions [level, 1]];
		int[,] temp = new int[11 + (allMazes.current.level + Random.Range (0, 3)) * 2, 11 + (allMazes.current.level + Random.Range (0, 3)) * 2];
		//int[,] temp = new int[3, 11];

		for (int i = 0;i<temp.GetUpperBound(0)+1;i++){//set up original temp
			for (int j = 0;j<temp.GetUpperBound(1)+1;j++){
				if (i%2==1&&j%2==1){
					temp[i,j] = 0;
				}else{
					temp[i,j] = 1;
				}
			}
		}
		
		int totalCells = (temp.GetUpperBound (0)*temp.GetUpperBound (1)) / 4;
		int visitedCells = 1;
		int x,y;
		//bool turnedAround = false;

		int currentCell = Random.Range (0, totalCells)+1;
		//temp[(int)(Mathf.Round ((currentCell-1) / (temp.GetUpperBound(1)/2)) * 2 + 1),(int)((currentCell * 2 - 1) % temp.GetUpperBound (1))] = 2;
		temp [1, 1] = 2;
		temp [temp.GetUpperBound(0)-1,temp.GetUpperBound(1)-1] = 3;
		//temp[(int)(Mathf.Round ((totalCells/2-1) / (temp.GetUpperBound(1)/2)) * 2 + 1),(int)((totalCells/2 * 2 - 1) % temp.GetUpperBound (1))] = 4;
		//temp[(int)(Mathf.Round ((totalCells/2-1) / (temp.GetUpperBound(1)/2)) * 2 + 1),(int)((totalCells/2 * 2 - 1) % temp.GetUpperBound (1))] = 4;
		//Debug.Log (temp.GetUpperBound (0) / 2 + ", " + temp.GetUpperBound (1) / 2);
		//Debug.Log (temp [temp.GetUpperBound (0) / 2, temp.GetUpperBound (1) / 2]);
		temp[(int)((temp.GetUpperBound (0)/2)+1)/2*2-1, (int)((temp.GetUpperBound (1)/2)+1)/2*2-1] = 4;

		while (visitedCells<totalCells){
			x = (int)((currentCell * 2 - 1) % temp.GetUpperBound (1));
			y = (int)(Mathf.Round ((currentCell-1) / (temp.GetUpperBound(1)/2)) * 2 + 1);

			if (x-2>0&&surrounded (x-2,y,temp)){neighbors.Add(currentCell-1);}
			if (x+2<temp.GetUpperBound(1)&&surrounded (x+2,y,temp)){neighbors.Add(currentCell+1);}
			if (y-2>0&&surrounded (x,y-2,temp)){neighbors.Add(currentCell-temp.GetUpperBound(1)/2);}
			if (y+2<temp.GetUpperBound(0)&&surrounded (x,y+2,temp)){neighbors.Add(currentCell+temp.GetUpperBound(1)/2);}
			
			if (neighbors.Count>0){
				cells.Add (currentCell);
				
				currentCell = (int)neighbors [Random.Range (0, neighbors.Count)];
				neighbors.Clear ();
				
				temp[(int)(y-(y-(Mathf.Round ((currentCell-1) / (temp.GetUpperBound(1)/2)) * 2 + 1))/2),(int)(x-(x-((currentCell * 2 - 1) % temp.GetUpperBound (1)))/2)] = 0;
				
				visitedCells++;
			}
			else{
				//if (!turnedAround){temp[x,y] = 4;turnedAround = true;Debug.Log ("HI");}

				currentCell = (int)cells[cells.Count-1];
				cells.RemoveAt(cells.Count-1);
			}
		}

		allMazes.current.use = temp;
	}

	private static bool surrounded(int x, int y, int [,] temp){
		return (temp[y,x-1]==1&&temp[y,x+1]==1&&temp[y-1,x]==1&&temp[y+1,x]==1);
	}

	/*public static void set(int num){
		if (num==1){use = maze2;}
		if (num==2){use = maze1;}
		if (num==3){use = maze4;}
		if (num==4){use = maze3;}
	}

	private static int [,] maze1 = {
	//   0 1 2 3 4 5 6 7 8 9 101112
		{1,1,1,1,1,1,1,1,1,1,1,1,1},//0
		{1,0,0,0,0,0,0,0,0,0,0,0,1},//1
		{1,0,1,1,1,1,1,1,1,0,1,0,1},//2
		{1,0,0,0,1,0,0,4,1,0,1,0,1},//3
		{1,1,1,0,1,0,1,1,1,0,1,0,1},//4
		{1,3,1,0,1,0,1,0,0,0,1,0,1},//5
		{1,0,1,0,1,0,1,0,1,1,1,0,1},//6
		{1,0,1,0,0,0,1,0,1,0,0,0,1},//7
		{1,0,1,1,1,1,1,0,1,0,1,0,1},//8
		{1,0,0,0,0,0,0,0,1,2,1,0,1},//9
		{1,0,1,1,1,1,1,1,1,0,1,0,1},//10
		{1,0,1,0,0,0,0,0,0,0,1,0,1},//11
		{1,0,1,1,1,0,1,1,1,1,1,0,1},//12
		{1,0,0,0,0,0,1,0,0,0,0,0,1},//13
		{1,1,1,1,1,1,1,1,1,1,1,1,1}//14
	};

	private static int[,] maze2 = {
		{1,1,1,1,1},
		{1,2,1,4,1},
		{1,3,1,0,1},
		{1,0,0,0,1},
		{1,1,1,1,1}
	};

	private static int[,] maze3 = {
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
		{1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1},
		{1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1},
		{1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1},
		{1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1},
		{1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1},
		{1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1},
		{1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1},
		{1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
		{1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
		{1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1},
		{1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1},
		{1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1},
		{1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1},
		{1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,4,0,0,1},
		{1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
		{1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1},
		{1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
		{1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,0,1,3,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1},
		{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
		{1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1},
		{1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1},
		{1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
		{1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1},
		{1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1},
		{1,0,0,0,1,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
	};

	private static int[,] maze4 = {
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1},
		{1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1},
		{1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
		{1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1},
		{1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1},
		{1,3,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,2,1},
		{1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1},
		{1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1},
		{1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,4,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1},
		{1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1},
		{1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1},
		{1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
		{1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1},
		{1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1},
		{1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
		{1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1},
		{1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1},
		{1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
	};*/
}